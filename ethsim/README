Application emulator:
----------------------
The idea is that all application logic is located at "app.c". This logic uses USB and Ethernet
drivers to communicate with outer world. Thus "app.c" file can be (and should be) completely identical
in emulated application and the real one. So ideally, once application runs correct in emulated mode
(which is easily checked by running the below described tests) it can be compiled to LPC2148 platform
and run correctly on it as well (you just need to copy app.c from one folder to another).

The abstraction is achieved by implementing USB and Ethernet drivers to send/receive data over
sockets. The protocol for sending the packets is trivial:
	- Transport layer is TCP
	- each packet is preceeded by 4 bytes integer indicating length of the packet
	  (this integer is sent in little-endian byte order).
	- packet's raw data is sent.
When the application is ran, it opens two ports for listening: one for USB stream, other for Ethernet.

The above protocol is referenced as "packets channel" below.
For testing purposes there is a python class PacketChannel that implements this protocol
(in packetchannel.py)


The testing environment:
-------------------------
In case the application is simple ethernet adapter the test is trivial:
	- send random packets to both USB and Ethernet streams and check that input USB stream is equal
	  to output Ethernet stream and vice-versa.
    - a bit better test: check that output streams are subset of input streams (to account for
	  possible packet drops in the application).

In case the application involves tunneling, the test environment is more complex
sinse the Ethernet channel should be forwarded to TCP/IP stack. So there are few additional
services:
	- stackfeeder.py - forwards packets from Ethernet channel to TAP interface and vice-versa.
	- virtclient.py  - listens to UDP port (over TAP interface) defined by tunelling protocol and
					   sends the received packets to "client channel" (see below). The same is vice-versa.

Now the testing can be performed by comparing USB channel of application with "client" channel of
virtclient.py in the same manner as described above for simple ethernet adapter.


Running instructions:
----------------------
- At the first time run "./setuptest" as root.
- Run "./runtest" as regular user.

For example:
% sudo ./setuptest virt myname  # configure the TAP interface
% ./runtest virt  				# run the test 
% ./runtest virt				# run it again


